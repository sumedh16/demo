import React, { useState, useEffect, useRef } from "react";
import firebase from "firebase/compat/app";
import "firebase/compat/firestore";
import Modal from "./Modal";

function BST() {
  const [nodes, setNodes] = useState([]);
  const [value, setValue] = useState("");
  const [treeName, setTreeName] = useState("");
  const [shapeType, setShapeType] = useState("circle");
  const [savedTrees, setSavedTrees] = useState([]);
  const [selectedTree, setSelectedTree] = useState("");
  const [modalMessage, setModalMessage] = useState("");
  const [showModal, setShowModal] = useState(false);

  const canvasRef = useRef(null);

  const firebaseConfig = {
    // Your Firebase configuration
    apiKey: "AIzaSyAzrjEU6Pr12gOT_hhqg8j2eHA37s9SUGE",
    authDomain: "tree-deb80.firebaseapp.com",
    projectId: "tree-deb80",
    storageBucket: "tree-deb80.appspot.com",
    messagingSenderId: "402582428031",
    appId: "1:402582428031:web:ce3f7bdb8f592b084aa24a",
  };

  firebase.initializeApp(firebaseConfig);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const nodeRadius = 15;
    const fontSize = 12;
    ctx.font = `${fontSize}px Arial`;

    const drawNode = (node, x, y, level) => {
      ctx.beginPath();
      if (shapeType === "circle") {
        ctx.arc(x, y, nodeRadius, 0, 2 * Math.PI);
      } else if (shapeType === "square") {
        const squareSize = nodeRadius * 2;
        ctx.rect(x - nodeRadius, y - nodeRadius, squareSize, squareSize);
      }
      ctx.fillStyle = "white";
      ctx.fill();
      ctx.stroke();

      ctx.fillStyle = "black";
      ctx.fillText(node.value, x - fontSize / 2, y + fontSize / 2);
      const nodeGap = 65 + level * 5;
      if (node.left !== null) {
        const leftChild = nodes[node.left];
        const leftX = x - nodeGap / Math.pow(2, level);
        const leftY = y + nodeGap;

        ctx.beginPath();
        ctx.moveTo(x, y + nodeRadius);
        ctx.lineTo(leftX, leftY - nodeRadius);
        ctx.stroke();
        drawNode(leftChild, leftX, leftY, level + 1);
      }

      if (node.right !== null) {
        const rightChild = nodes[node.right];
        const rightX = x + nodeGap / Math.pow(2, level);
        const rightY = y + nodeGap;

        ctx.beginPath();
        ctx.moveTo(x, y + nodeRadius);
        ctx.lineTo(rightX, rightY - nodeRadius);
        ctx.stroke();
        drawNode(rightChild, rightX, rightY, level + 1);
      }
    };

    nodes.forEach((node, index) => {
      if (index === 0) {
        drawNode(node, canvas.width / 2, nodeRadius + 50, 0);
      }
    });
  }, [nodes, shapeType]);

  useEffect(() => {
    const getSavedTrees = async () => {
      try {
        const db = firebase.firestore();
        const snapshot = await db.collection("trees").get();
        const treeOptions = snapshot.docs.map((doc) => ({
          name: doc.id,
          nodes: doc.data().nodes,
        }));
        setSavedTrees(treeOptions);
      } catch (error) {
        console.error("Error fetching saved trees:", error);
      }
    };

    getSavedTrees();
  }, []);

  const handleInsert = (value) => {
    const ivalue = parseInt(value, 10);
    if (isNaN(ivalue)) {
      setModalMessage("Please enter a valid number.");
      setShowModal(true);
    }
    setValue(ivalue.toString());
    const newNode = {
      value: ivalue,
      left: null,
      right: null,
      parent: null,
    };
    let currentNodeIndex = 0;
    while (true) {
      const currentNode = nodes[currentNodeIndex];
      if (!currentNode) {
        setNodes([...nodes, newNode]);
        break;
      }
      if(ivalue===currentNode.value){
        const side=prompt("Specify the side, left or Right");
        if(side===null){
          break;
        }
        else if(side==="left"){
          if(currentNode.left===null){
          const newNodes = [...nodes];
          currentNode.left = newNodes.length;
          newNode.parent = currentNodeIndex;
          newNodes.push(newNode);
          newNodes[currentNodeIndex] = currentNode;
          setNodes(newNodes);
          break;
          }
          else{
            currentNodeIndex=currentNode.left;
          }
        }
        else if(side==="right"){
          if(currentNode.right===null){
          const newNodes = [...nodes];
          currentNode.right = newNodes.length;
          newNode.parent = currentNodeIndex;
          newNodes.push(newNode);
          newNodes[currentNodeIndex] = currentNode;
          setNodes(newNodes);
          break;
          }
          else{
            currentNodeIndex=currentNode.right;
          }
        }
        setValue("");
        
      }
      else if (ivalue < currentNode.value) {
        if (currentNode.left === null) {
          const newNodes = [...nodes];
          currentNode.left = newNodes.length;
          newNode.parent = currentNodeIndex;
          newNodes.push(newNode);
          newNodes[currentNodeIndex] = currentNode;
          setNodes(newNodes);
          break;
        } else {
          currentNodeIndex = currentNode.left;
        }
      } else {
        if (currentNode.right === null) {
          const newNodes = [...nodes];
          currentNode.right = newNodes.length;
          newNode.parent = currentNodeIndex;
          newNodes.push(newNode);
          newNodes[currentNodeIndex] = currentNode;
          setNodes(newNodes);
          break;
        } else {
          currentNodeIndex = currentNode.right;
        }
      }
    }
  };


  // const handleInsert = (value) => {
  //   const ivalue = parseInt(value, 10);
  //   if (isNaN(ivalue)) {
  //     alert("Please enter a valid number.");
  //     return;
  //   }
  //   setValue(ivalue.toString());
  //   const newNode = {
  //     value: ivalue,
  //     left: null,
  //     right: null,
  //     parent: null,
  //   };
  
  //   if (nodes.length === 0) {
  //     setNodes([newNode]);
  //     return;
  //   }
  
  //   let currentNodeIndex = 0;
  //   let insertSide = null;
  //   let promptSide = false; // Track if prompt for side has already been shown
  
  //   while (true) {
  //     const currentNode = nodes[currentNodeIndex];
  
  //     if (ivalue === currentNode.value) {
  //       if (insertSide === null && !promptSide) {
  //         let side;
  //         while (true) {
  //           side = prompt("Specify the side, left or right");
  //           if (side === null) {
  //             break;
  //           }
  //           if (side === "left" || side === "right") {
  //             break;
  //           } else {
  //             alert("Please enter a valid side (left or right).");
  //           }
  //         }
  //         if (side === null) {
  //           break;
  //         }
  //         insertSide = side;
  //         promptSide = true;
  //       }
  
  //       if (insertSide === "left" && currentNode.left === null) {
  //         const newNodes = [...nodes];
  //         currentNode.left = newNodes.length;
  //         newNode.parent = currentNodeIndex;
  //         newNodes.push(newNode);
  //         setNodes(newNodes);
  //         break;
  //       } else if (insertSide === "right" && currentNode.right === null) {
  //         const newNodes = [...nodes];
  //         currentNode.right = newNodes.length;
  //         newNode.parent = currentNodeIndex;
  //         newNodes.push(newNode);
  //         setNodes(newNodes);
  //         break;
  //       } else {
  //         currentNodeIndex = insertSide === "left" ? currentNode.left : currentNode.right;
  //       }
  //     } else if (ivalue < currentNode.value) {
  //       if (currentNode.left === null) {
  //         const newNodes = [...nodes];
  //         currentNode.left = newNodes.length;
  //         newNode.parent = currentNodeIndex;
  //         newNodes.push(newNode);
  //         setNodes(newNodes);
  //         break;
  //       } else {
  //         currentNodeIndex = currentNode.left;
  //       }
  //     } else {
  //       if (currentNode.right === null) {
  //         const newNodes = [...nodes];
  //         currentNode.right = newNodes.length;
  //         newNode.parent = currentNodeIndex;
  //         newNodes.push(newNode);
  //         setNodes(newNodes);
  //         break;
  //       } else {
  //         currentNodeIndex = currentNode.right;
  //       }
  //     }
  
  //   }
  // };
  
  
  

  const handleShapeChange = (e) => {
    setShapeType(e.target.value);
  };

  const handleSave = () => {
    const existingTree = savedTrees.find((tree) => tree.name === treeName);

    if (existingTree && treeName !== selectedTree) {
      const confirmation = window.confirm(
        `A tree with the name "${treeName}" already exists. Do you want to override it?`
      );

      if (!confirmation) {
        setModalMessage("Tree saved successfully.");
        setShowModal(true);
        return;
      }
    }
    const db = firebase.firestore();
    const treeData = {
      nodes: nodes,
    };

    if (treeName.trim() === "") {
      console.error("Tree name cannot be empty.");
      return;
    }

    db.collection("trees")
      .doc(treeName)
      .set(treeData)
      .then(() => {
        console.log("Tree saved successfully with name:", treeName);
        // alert("Tree saved successfully.");
        setModalMessage("Tree saved successfully.");
        setShowModal(true);
        setSelectedTree(treeName);
        setSavedTrees((prevTrees) => {
          // const treeExists = prevTrees.find((tree) => tree.name === treeName);
          if (existingTree) {
            existingTree.nodes=nodes;
            return prevTrees;
          }
          return [...prevTrees, { name: treeName, nodes:nodes }];
        });
      })
      .catch((error) => {
        console.error("Error saving tree:", error);
      });
  };

  const handleTreeSelect = async (e) => {
    const selectedTreeName = e.target.value;
    if (selectedTreeName !== "newtree") {
      setSelectedTree(selectedTreeName);
      // setTreeName(selectedTreeName);

      // const selectedTreeOptions = savedTrees.find(
      //   (tree) => tree.name === selectedTreeName
      // );
      // setNodes(selectedTreeOptions.nodes);
      if (selectedTreeName === treeName) {
        setNodes([...nodes]);
      } else {
        const selectedTreeOptions = savedTrees.find(
          (tree) => tree.name === selectedTreeName
        );
        setNodes(selectedTreeOptions.nodes);
        setTreeName(selectedTreeName);
      }
    } else {
      setSelectedTree("");
      setTreeName("");
      setNodes([]);
    }
  };

  const closeModal = () => {
    setShowModal(false);
  };

  return (
    <div>
      <div>
         <input
          type="number"
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />
        <button onClick={() => handleInsert(value)}>Insert</button>
        <input
          type="text"
          value={treeName}
          onChange={(e) => setTreeName(e.target.value)}
          placeholder="Enter tree name"
        />
        <button onClick={() => handleSave()}>Save Tree</button>
        <select value={selectedTree} onChange={handleTreeSelect}>
          <option value="newtree">Create a New Tree</option>
          {savedTrees.map((tree) => (
            <option key={tree.name} value={tree.name}>
              {tree.name}
            </option>
          ))}
        </select>
        <select value={shapeType} onChange={handleShapeChange}>
          <option value="circle">Circle</option>
          <option value="square">Square</option>
        </select>
      </div>
      <canvas
        ref={canvasRef}
        width={800}
        height={600}
        style={{ border: "1px solid black" }}
      />
      {showModal && <Modal message={modalMessage} closeModal={closeModal} />}
    
    </div>
  );
}

export default BST;



import React from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.bundle.min.js";
function Modal({ message, closeModal }) {
  return (
    <div className="modal" tabIndex="-1" role="dialog">
      <div className="modal-dialog" role="document">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">Notification</h5>
            <button type="button" className="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div className="modal-body">{message}</div>
          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" data-dismiss="modal">
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
    
  );
}

export default Modal;
