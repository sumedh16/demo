import React, { useState, useEffect, useRef } from "react";
import firebase from "firebase/compat/app";
import "firebase/compat/firestore";

function BST() {
  const [nodes, setNodes] = useState([]);
  const [value, setValue] = useState("");
  const [treeName, setTreeName] = useState("");

  const canvasRef = useRef(null);

  const firebaseConfig = {
    apiKey: "AIzaSyAzrjEU6Pr12gOT_hhqg8j2eHA37s9SUGE",
  authDomain: "tree-deb80.firebaseapp.com",
  projectId: "tree-deb80",
  storageBucket: "tree-deb80.appspot.com",
  messagingSenderId: "402582428031",
  appId: "1:402582428031:web:ce3f7bdb8f592b084aa24a"
  };

  firebase.initializeApp(firebaseConfig);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const nodeRadius = 15;
    const fontSize = 14;
    ctx.font = `${fontSize}px Arial`;

    const drawNode = (node, x, y, level) => {
      ctx.beginPath();
      ctx.arc(x, y, nodeRadius, 0, 2 * Math.PI);
      ctx.fillStyle = "white";
      ctx.fill();
      ctx.stroke();

      ctx.fillStyle = "black";
      ctx.fillText(node.value, x - fontSize / 2, y + fontSize / 2);
      const nodeGap = 65+level * 16;
      if (node.left !== null) {
        const leftChild = nodes[node.left];
        const leftX = x - nodeGap/Math.pow(2.6,level); 
        const leftY = y + nodeGap;


        ctx.beginPath();
        ctx.moveTo(x, y + nodeRadius);
        ctx.lineTo(leftX, leftY - nodeRadius);
        ctx.stroke();
        drawNode(leftChild, leftX, leftY, level + 1);
      }

      if (node.right !== null) {
        const rightChild = nodes[node.right];
        const rightX = x + nodeGap/Math.pow(2.3,level);
        const rightY = y + nodeGap;

      
        ctx.beginPath();
        ctx.moveTo(x, y + nodeRadius);
        ctx.lineTo(rightX, rightY - nodeRadius);
        ctx.stroke();
        drawNode(rightChild, rightX, rightY, level + 1);
      }
    };


    nodes.forEach((node, index) => {
      if (index === 0) {
        drawNode(node, canvas.width / 2, nodeRadius + 50, 0);
      }
    });
  }, [nodes]);

  const handleInsert = (value) => {
    const ivalue = parseInt(value, 10);
        setValue(ivalue);
        const newNode = {
          value: value,
          left: null,
          right: null,
          parent: null,
        };
        let currentNodeIndex = 0;
        while (true) {
          const currentNode = nodes[currentNodeIndex];
          if (!currentNode) {
            setNodes([...nodes, newNode]);
            break;
          }
          if (ivalue <= currentNode.value) {
            if (currentNode.left === null) {
              const newNodes = [...nodes];
              currentNode.left = newNodes.length;
              newNode.parent = currentNodeIndex;
              newNodes.push(newNode);
              newNodes[currentNodeIndex] = currentNode;
              setNodes(newNodes);
              break;
            } else {
              currentNodeIndex = currentNode.left;
            }
          } else {
            if (currentNode.right === null) {
              const newNodes = [...nodes];
              currentNode.right = newNodes.length;
              newNode.parent = currentNodeIndex;
              newNodes.push(newNode);
              newNodes[currentNodeIndex] = currentNode;
              setNodes(newNodes);
              break;
            } else {
              currentNodeIndex = currentNode.right;
            }
          }
        }
  };

  const handleSave = () => {
    const db = firebase.firestore();
    const treeData = {
      nodes: nodes,
    };

    if (treeName.trim() === "") {
      console.error("Tree name cannot be empty.");
      return;
    }

  db.collection("trees")
    .doc(treeName)
    .set(treeData)
    .then(() => {
      console.log("Tree saved successfully with name:", treeName);
    })
    .catch((error) => {
      console.error("Error saving tree:", error);
    });

  };

  return (
    <div>
      <div>
      <input
        type="text"
        value={value}
        onChange={(e) => setValue(e.target.value)}
      />
      <button onClick={() => handleInsert(value)}>Insert</button>
      <input
        type="text"
        value={treeName}
        onChange={(e) => setTreeName(e.target.value)}
        placeholder="Enter tree name"
      />
      <button onClick={() => handleSave()}>Save Tree</button>
      </div>
      <canvas ref={canvasRef} width={900} height={600}></canvas>
    </div>
  );
}

function App() {
  return (
    <div className="App">
      <BST />
    </div>
  );
}

export default App;
